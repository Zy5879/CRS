// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Transmission {
  AUTOMATIC
  MANUAL
}

enum Maintenance {
  IN_MAINTENANCE
  OUT_OF_SERVICE
  IN_SERVICE
}

enum Role {
  ADMIN
  STAFF
}

enum InvoiceStatus {
  PAID
  UNPAID
}

enum ReservationStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  LATE
}

model Customer {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  dob DateTime
  phone String
  address String
  driversLicense String @unique
  reservations Reservation?
  createdAt DateTime
}

model Vehicles {
  id String @id @default(uuid())
  make String
  model String
  year DateTime
  transmission Transmission
  price Decimal @db.Decimal(12,2)
  location String
  inventory Int
  Reservation Reservation[]
  maintenance Maintenance
}

model Employee {
  id String @id @default(uuid())
  name String
  password String
  email String @unique
  dob DateTime
  phone String
  address String
  createdAt DateTime
  role Role
}

model Reservation {
  id String @id @default(uuid())
  customer Customer @relation(fields: [cust_id], references: [id])
  cust_id String @unique
  vehicle Vehicles @relation(fields: [vehicle_id], references: [id])
  vehicle_id String @unique
  pickupLocation String
  dropOffLocation String
  pickupDateTime DateTime
  dropOffDateTime DateTime
  reservationStatus ReservationStatus @default(PENDING)
  Invoice Invoice?
}

model Invoice {
  id String @id @default(uuid())
  reservation Reservation @relation(fields: [reservation_id], references: [id])
  reservation_id String @unique
  amount Decimal @db.Decimal(12,2)
  status InvoiceStatus
}